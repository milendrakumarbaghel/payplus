// Prisma schema for PostgreSQL replacing MongoDB models

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid()) @db.Uuid
  username  String   @unique
  password  String
  firstName String
  lastName  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  account        Account?
  notifications  Notification[]
  requestsSent   Request[]     @relation("RequestsSent")
  requestsToMe   Request[]     @relation("RequestsTo")
}

model Account {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @unique @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  balance   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  content   String
  status    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Request {
  id              String   @id @default(uuid()) @db.Uuid
  // User who will receive the request (requested to)
  requesterToId   String   @db.Uuid
  requesterTo     User     @relation("RequestsTo", fields: [requesterToId], references: [id], onDelete: Cascade)
  // User who created the request (requested from)
  requestFromId   String   @db.Uuid
  requestFrom     User     @relation("RequestsSent", fields: [requestFromId], references: [id], onDelete: Cascade)
  amountRequested Int
  status          Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}
